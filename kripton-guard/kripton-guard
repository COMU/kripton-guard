#!/usr/bin/python3
import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import *
from crontab import CronTab
import shutil, os, sys, getpass
import configparser
import sqlite3
import pyrebase
import subprocess
import shlex
import re

if os.getegid() != 0:
    sys.exit("Please run the script with sudo!")
current_user = getpass.getuser()

config=configparser.ConfigParser(allow_no_value=True)
config.read('/etc/kripton-guard/kripton-guard.conf')
subnet=config['SETTINGS']['subnet']
interface=config['SETTINGS']['interface']
mail=config['SETTINGS']['mail']
password=config['SETTINGS']['password']
repeat_time=config['SETTINGS']['repeat-time']

router=config['SERVERS']['router']
dhcp_server=config['SERVERS']['dhcp-server']
dns_server=config['SERVERS']['dns-server']


conn = sqlite3.connect('/var/lib/kripton-guard.db')

apiKey=config['API']['apiKey']
authDomain=config['API']['authDomain']
databaseURL=config['API']['databaseURL']

config_pyrebase = {
  "apiKey": apiKey,
  "authDomain": authDomain,
  "databaseURL": databaseURL,
  "storageBucket": ""
}

firebase = pyrebase.initialize_app(config_pyrebase)

mAuth = firebase.auth()
user = mAuth.sign_in_with_email_and_password(mail, password)
userID = mAuth.get_account_info(user['idToken'])
userID = userID["users"][0]["localId"]

def createTables(conn):
    #Create db table if it's not exist
    conn.execute("CREATE TABLE mac_ip_addresses (ID INTEGER PRIMARY KEY AUTOINCREMENT, macAddress varchar(17) UNIQUE NOT NULL, ipAddress varchar(15) NOT NULL, comment varchar(50) )")
    conn.execute("CREATE TABLE servers (ID INTEGER PRIMARY KEY AUTOINCREMENT, macAddress varchar(17) UNIQUE NOT NULL, ipAddress varchar(15) NOT NULL, name varchar(50) )")
    conn.commit()

def createCron():
    my_cron = CronTab(user=current_user)
    job = my_cron.new(command='python3 kripton-guard')
    job.minute.every(repeat_time)
    my_cron.write()

def showDevices():
    #Shows devices in whitelist
    print("\n========== Your Whitelist ==========\n    Mac Address       IP Address   ")
    query = "SELECT macAddress,ipAddress FROM mac_ip_addresses;"
    result = conn.execute(query)
    for row in result:
        print(row[0] + "    " + row[1] + "\n")
    print ("====================================")

def sendNotification(type):
    #Trigger Cloud Functions
    db = firebase.database()
    data = {type: "True"}
    db.child("usersMAC").child(userID).push(data,user['idToken'])

def saveMACs():
    ans,unans=srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=subnet), timeout=5, iface=str(interface), verbose=0)
    for s,r in ans:
        mac=(r.sprintf("%Ether.src%"))
        ip=(r.sprintf("%ARP.psrc%"))
        query= "INSERT INTO mac_ip_addresses (macAddress, ipAddress) VALUES ('{0}','{1}');".format(mac, ip)
        conn.execute(query)
    conn.commit()

    if(router == "yes"):
        routerIP = getGateway()
        query = "INSERT INTO servers (macAddress, ipAddress, name) VALUES ('{0}','{1}','router');".format(getMac(routerIP),routerIP)
        conn.execute(query)
        conn.commit()

    for option in config.options("CUSTOMSERVERS"):
        if(option != ""):
            ip = config["CUSTOMSERVERS"][option]
            query = "INSERT INTO servers (macAddress, ipAddress, name) VALUES ('{0}','{1}','{2}');".format(getMac(ip), ip, option)
            conn.execute(query)
        conn.commit()

def searchNewMACs():
    ans,unans=srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=subnet), timeout=5, iface=str(interface), verbose=0)
    for s,r in ans:
        mac=(r.sprintf("%Ether.src%"))
        ip=(r.sprintf("%ARP.psrc%"))
        query = "SELECT macAddress,ipAddress FROM mac_ip_addresses WHERE macAddress = '{0}';".format(mac)
        result = conn.execute(query)
        row = result.fetchone()
        if(row):
            if(row[1] != ip):
                query = "UPDATE mac_ip_addresses SET ipAddress = '{0}' WHERE macAddress = '{1}';".format(ip,mac)
                conn.execute(query)
                conn.commit()
        else:
            sendNotification("newMAC")
            query = "INSERT INTO mac_ip_addresses (macAddress, ipAddress) VALUES ('{0}','{1}');".format(mac, ip)
            conn.execute(query)
            conn.commit()

def getMac(ip):
    ans,unans=arping(ip,verbose=0)
    for s,r in ans:
        mac=(r.sprintf("%Ether.src%"))
    return mac

def checkServers(server,ip):
    mac = getMac(ip)
    query = "SELECT macAddress FROM servers WHERE name = '{0}';".format(server)
    result = conn.execute(query)
    row = result.fetchone()
    if(row[0] != mac):
        sendNotification("'{0}'MACChanged".format(server))

def getGateway():
    import subprocess, shlex
    strs = subprocess.check_output(shlex.split('ip r l'))
    gateway = strs.decode().split('default via')[-1].split()[0]
    return gateway

if(config['SETTINGS']['first-time']=='1'):
    config['SETTINGS']['first-time']='0'
    with open('/etc/kripton-guard/kripton-guard.conf','w') as configfile:
        config.write(configfile)
    createTables(conn)
    saveMACs()
    showDevices()
else:
    searchNewMACs()
    if(router == "yes"):
        routerIP = getGateway()
        checkServers("router", routerIP)
    for option in config.options("CUSTOMSERVERS"):
        if(option != ""):
            ip = config["CUSTOMSERVERS"][option]
            checkServers(option, ip)
    showDevices()

conn.close()
